using Nest;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Text;

namespace BusinessLibrary.Models
{
    public class Caregiver
    {

        #region Contructors

        /// <summary>
        /// Default constructor. 
        /// Need for serialization purposes.
        /// </summary>
        public Caregiver()
        {
        }

        /// <summary>
        /// Fields constructor.
        /// </summary>
        public Caregiver(int caregiverId, int healthcareNo, string name, int phoneNo)
        {
            HealthcareNo = healthcareNo;
            Name = name;
            PhoneNo = phoneNo;
            CaregiverId = caregiverId;
        }

        /// <summary>
        /// Clone/Copy constructor.
        /// </summary>
        /// <param name="instance">The object to clone from.</param>
        public Caregiver(Caregiver instance)
            : this(instance.CaregiverId, instance.HealthcareNo, instance.Name, instance.PhoneNo)
        {
        }

        #endregion

        #region Properties


        /// <summary>
        /// Name of the caregiver.
        /// </summary>
        [JsonProperty(PropertyName = "caregiverId")]
        public int CaregiverId { get; set; }
        
        /// <summary>
        /// Id generated by our system upon creation of a new instance.
        /// </summary>
        [JsonProperty(PropertyName = "healthcareNo")]
        public int HealthcareNo { get; set; }

        /// <summary>
        /// Name of the patient.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Phone no of the caregiver.
        /// </summary>
        [JsonProperty(PropertyName = "phoneNo")]
        public int PhoneNo { get; set; }


        #endregion

        #region Methods

        /// <summary>
        /// Overrides the .ToString method.
        /// </summary>
        public override string ToString()
        {
            return Name;
        }

        #endregion

    }
}
