using Nest;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Text;

namespace BusinessLibrary.Models
{
    public class Medication
    {

        #region Contructors

        /// <summary>
        /// Default constructor. 
        /// Need for serialization purposes.
        /// </summary>
        public Medication()
        {
        }

        /// <summary>
        /// Fields constructor.
        /// </summary>
        public Medication(int dIN, bool refillStatus, String expDate, int dosage, int time, int leftoverAmount)
        {
            DIN = dIN;
            RefillStatus = refillStatus;
            ExpDate = expDate;
            Dosage= dosage;
            Time= time;
            LeftoverAmount= leftoverAmount;
        }

        /// <summary>
        /// Clone/Copy constructor.
        /// </summary>
        /// <param name="instance">The object to clone from.</param>
        public Medication(Medication instance)
            : this(instance.DIN, instance.RefillStatus, instance.ExpDate, instance.Dosage, instance.Time, instance.LeftoverAmount)
        {
        }

        #endregion

        #region Properties

        /// <summary>
        /// Id generated by our system upon creation of a new instance.
        /// </summary>
        [JsonProperty(PropertyName = "dIN")]
        public int DIN { get; set; }

        /// <summary>
        /// Name of the doctor.
        /// </summary>
        [JsonProperty(PropertyName = "refillStatus")]
        public bool RefillStatus
        {
            get
               /* {
                    return string.Format("{0}", Name);
                } */;
            set;
        }

        /// <summary>
        /// Password of the doctor.
        /// </summary>
        [JsonProperty(PropertyName = "expDate")]
        public string ExpDate { get; set; }

        /// <summary>
        /// Password of the doctor.
        /// </summary>
        [JsonProperty(PropertyName = "dosage")]
        public int Dosage { get; set; }

        /// <summary>
        /// Password of the doctor.
        /// </summary>
        [JsonProperty(PropertyName = "time")]
        public int Time { get; set; }

        /// <summary>
        /// Password of the doctor.
        /// </summary>
        [JsonProperty(PropertyName = "leftoverAmount")]
        public int LeftoverAmount { get; set; }
        /*/// <summary>
        /// FUll name of the student.
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string FullName
        {
            get
            {
                return string.Format("{0} {1}", FirstName, LastName);
            }
        }*/

        #endregion

        #region Methods

        // /// <summary>
        // /// Overrides the .ToString method.
        // /// </summary>
        // public override string ToString()
        // {
        //     return Name;
        // }

        #endregion

    }
}
